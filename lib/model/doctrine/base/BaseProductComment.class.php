<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ProductComment', 'yozoa');

/**
 * BaseProductComment
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $user_id
 * @property integer $parent_id
 * @property integer $product_id
 * @property integer $type
 * @property string $body
 * @property string $email
 * @property timestamp $created_at
 * @property Product $Product
 * @property User $User
 * 
 * @method integer        getId()         Returns the current record's "id" value
 * @method integer        getUserId()     Returns the current record's "user_id" value
 * @method integer        getParentId()   Returns the current record's "parent_id" value
 * @method integer        getProductId()  Returns the current record's "product_id" value
 * @method integer        getType()       Returns the current record's "type" value
 * @method string         getBody()       Returns the current record's "body" value
 * @method string         getEmail()      Returns the current record's "email" value
 * @method timestamp      getCreatedAt()  Returns the current record's "created_at" value
 * @method Product        getProduct()    Returns the current record's "Product" value
 * @method User           getUser()       Returns the current record's "User" value
 * @method ProductComment setId()         Sets the current record's "id" value
 * @method ProductComment setUserId()     Sets the current record's "user_id" value
 * @method ProductComment setParentId()   Sets the current record's "parent_id" value
 * @method ProductComment setProductId()  Sets the current record's "product_id" value
 * @method ProductComment setType()       Sets the current record's "type" value
 * @method ProductComment setBody()       Sets the current record's "body" value
 * @method ProductComment setEmail()      Sets the current record's "email" value
 * @method ProductComment setCreatedAt()  Sets the current record's "created_at" value
 * @method ProductComment setProduct()    Sets the current record's "Product" value
 * @method ProductComment setUser()       Sets the current record's "User" value
 * 
 * @package    symfony
 * @subpackage model
 * @author     Sagar S. Deshmukh
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProductComment extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('product_comment');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('parent_id', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             'notnull' => true,
             ));
        $this->hasColumn('product_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('type', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             'notnull' => true,
             ));
        $this->hasColumn('body', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '',
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'notnull' => true,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Product', array(
             'local' => 'product_id',
             'foreign' => 'id'));

        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));
    }
}