<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('XArea', 'yozoa');

/**
 * BaseXArea
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $parent_id
 * @property string $name
 * @property float $map_lat
 * @property float $map_lng
 * @property integer $lft
 * @property integer $rgt
 * @property integer $lvl
 * @property XArea $XArea
 * @property Doctrine_Collection $Product
 * @property Doctrine_Collection $User
 * @property Doctrine_Collection $PriceFormat
 * @property Doctrine_Collection $XAreaLocation
 * 
 * @method integer             getId()            Returns the current record's "id" value
 * @method integer             getParentId()      Returns the current record's "parent_id" value
 * @method string              getName()          Returns the current record's "name" value
 * @method float               getMapLat()        Returns the current record's "map_lat" value
 * @method float               getMapLng()        Returns the current record's "map_lng" value
 * @method integer             getLft()           Returns the current record's "lft" value
 * @method integer             getRgt()           Returns the current record's "rgt" value
 * @method integer             getLvl()           Returns the current record's "lvl" value
 * @method XArea               getXArea()         Returns the current record's "XArea" value
 * @method Doctrine_Collection getProduct()       Returns the current record's "Product" collection
 * @method Doctrine_Collection getUser()          Returns the current record's "User" collection
 * @method Doctrine_Collection getPriceFormat()   Returns the current record's "PriceFormat" collection
 * @method Doctrine_Collection getXAreaLocation() Returns the current record's "XAreaLocation" collection
 * @method XArea               setId()            Sets the current record's "id" value
 * @method XArea               setParentId()      Sets the current record's "parent_id" value
 * @method XArea               setName()          Sets the current record's "name" value
 * @method XArea               setMapLat()        Sets the current record's "map_lat" value
 * @method XArea               setMapLng()        Sets the current record's "map_lng" value
 * @method XArea               setLft()           Sets the current record's "lft" value
 * @method XArea               setRgt()           Sets the current record's "rgt" value
 * @method XArea               setLvl()           Sets the current record's "lvl" value
 * @method XArea               setXArea()         Sets the current record's "XArea" value
 * @method XArea               setProduct()       Sets the current record's "Product" collection
 * @method XArea               setUser()          Sets the current record's "User" collection
 * @method XArea               setPriceFormat()   Sets the current record's "PriceFormat" collection
 * @method XArea               setXAreaLocation() Sets the current record's "XAreaLocation" collection
 * 
 * @package    symfony
 * @subpackage model
 * @author     Sagar S. Deshmukh
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseXArea extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('x_area');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('parent_id', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             'notnull' => true,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('map_lat', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('map_lng', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('lft', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             'notnull' => true,
             ));
        $this->hasColumn('rgt', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             'notnull' => true,
             ));
        $this->hasColumn('lvl', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             'notnull' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('XArea', array(
             'local' => 'parent_id',
             'foreign' => 'id'));

        $this->hasMany('Product', array(
             'local' => 'id',
             'foreign' => 'x_area_id'));

        $this->hasMany('User', array(
             'local' => 'id',
             'foreign' => 'x_area_id'));

        $this->hasMany('PriceFormat', array(
             'local' => 'id',
             'foreign' => 'x_area_id'));

        $this->hasMany('XAreaLocation', array(
             'local' => 'id',
             'foreign' => 'parent_id'));
    }
}