<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('User', 'yozoa');

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $username
 * @property string $password
 * @property string $firstname
 * @property string $lastname
 * @property string $initial
 * @property integer $gender
 * @property string $email
 * @property string $address
 * @property boolean $is_active
 * @property timestamp $last_seen_at
 * @property string $image
 * @property string $culture
 * @property integer $x_area_id
 * @property string $fevorite_products
 * @property string $prefferred_language
 * @property string $prefferred_currency
 * @property XArea $XArea
 * @property Language $Language
 * @property Doctrine_Collection $ProductComment
 * 
 * @method integer             getId()                  Returns the current record's "id" value
 * @method string              getUsername()            Returns the current record's "username" value
 * @method string              getPassword()            Returns the current record's "password" value
 * @method string              getFirstname()           Returns the current record's "firstname" value
 * @method string              getLastname()            Returns the current record's "lastname" value
 * @method string              getInitial()             Returns the current record's "initial" value
 * @method integer             getGender()              Returns the current record's "gender" value
 * @method string              getEmail()               Returns the current record's "email" value
 * @method string              getAddress()             Returns the current record's "address" value
 * @method boolean             getIsActive()            Returns the current record's "is_active" value
 * @method timestamp           getLastSeenAt()          Returns the current record's "last_seen_at" value
 * @method string              getImage()               Returns the current record's "image" value
 * @method string              getCulture()             Returns the current record's "culture" value
 * @method integer             getXAreaId()             Returns the current record's "x_area_id" value
 * @method string              getFevoriteProducts()    Returns the current record's "fevorite_products" value
 * @method string              getPrefferredLanguage()  Returns the current record's "prefferred_language" value
 * @method string              getPrefferredCurrency()  Returns the current record's "prefferred_currency" value
 * @method XArea               getXArea()               Returns the current record's "XArea" value
 * @method Language            getLanguage()            Returns the current record's "Language" value
 * @method Doctrine_Collection getProductComment()      Returns the current record's "ProductComment" collection
 * @method User                setId()                  Sets the current record's "id" value
 * @method User                setUsername()            Sets the current record's "username" value
 * @method User                setPassword()            Sets the current record's "password" value
 * @method User                setFirstname()           Sets the current record's "firstname" value
 * @method User                setLastname()            Sets the current record's "lastname" value
 * @method User                setInitial()             Sets the current record's "initial" value
 * @method User                setGender()              Sets the current record's "gender" value
 * @method User                setEmail()               Sets the current record's "email" value
 * @method User                setAddress()             Sets the current record's "address" value
 * @method User                setIsActive()            Sets the current record's "is_active" value
 * @method User                setLastSeenAt()          Sets the current record's "last_seen_at" value
 * @method User                setImage()               Sets the current record's "image" value
 * @method User                setCulture()             Sets the current record's "culture" value
 * @method User                setXAreaId()             Sets the current record's "x_area_id" value
 * @method User                setFevoriteProducts()    Sets the current record's "fevorite_products" value
 * @method User                setPrefferredLanguage()  Sets the current record's "prefferred_language" value
 * @method User                setPrefferredCurrency()  Sets the current record's "prefferred_currency" value
 * @method User                setXArea()               Sets the current record's "XArea" value
 * @method User                setLanguage()            Sets the current record's "Language" value
 * @method User                setProductComment()      Sets the current record's "ProductComment" collection
 * 
 * @package    symfony
 * @subpackage model
 * @author     Sagar S. Deshmukh
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('username', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 50,
             ));
        $this->hasColumn('password', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 50,
             ));
        $this->hasColumn('firstname', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('lastname', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('initial', 'string', 1, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 1,
             ));
        $this->hasColumn('gender', 'integer', 1, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 1,
             ));
        $this->hasColumn('email', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 50,
             ));
        $this->hasColumn('address', 'string', 500, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 500,
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             'notnull' => true,
             ));
        $this->hasColumn('last_seen_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'notnull' => true,
             'length' => 25,
             ));
        $this->hasColumn('image', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('culture', 'string', 4, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('x_area_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('fevorite_products', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('prefferred_language', 'string', 4, array(
             'type' => 'string',
             'default' => true,
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('prefferred_currency', 'string', 4, array(
             'type' => 'string',
             'default' => true,
             'notnull' => true,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('XArea', array(
             'local' => 'x_area_id',
             'foreign' => 'id'));

        $this->hasOne('Language', array(
             'local' => 'language',
             'foreign' => 'culture'));

        $this->hasMany('ProductComment', array(
             'local' => 'id',
             'foreign' => 'user_id'));
    }
}