<?php



/**

 * Product

 *

 * This class has been auto-generated by the Doctrine ORM Framework

 *

 * @package    yozoa

 * @subpackage model

 * @author     Falcon

 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $

 */

class Product extends BaseProduct

{

  private $_categoryType;

  

  public function getExpireDate()
  {

    return date("Y-m-d H:i:s", strtotime($this->getConfirmedAt()) + 86400 * $this->getDuration());

  }
  

  /**

   * return product owner

   * @return User

   */

  public function getUser()

  {

    return Doctrine::getTable('User')->find($this->getUserId());

  }



  public function hasDoping($dopingType)

  {

    $attirubutesValueIds = explode(",", $this->getAttributeValueIds());

    if (in_array($dopingType, $attirubutesValueIds))

    {

      return true;

    }

    return false;

  }



  /**

   * Get Product image path

   */

  public function getImagePath($size = 's_')

  {
    if ($size && !in_array($size, array('t_','s_','m_')))

    {

      $size = 's_';

    }


    $image_data = unserialize($this->getImage());

    if ((isset($image_data['folder']) && isset($image_data['filename'])) && file_exists(sfConfig::get('sf_web_dir').$image_data['folder'].$size.$image_data['filename']))

    {
      return $image_data['folder'].$size.$image_data['filename'];

    }

    else

    {

      return '/images/'.$size.'default.jpg';

    }

  }

  public static function getSortTypes()

  {

    return array(

            'date_asc' => 'Time: newly listed',

            'date_desc' => 'Time: ending soonest',

            'price_asc' => 'Price: lowest first',

            'price_desc' => 'Price: highest first');

  }

  public function getParentCategories($culture = "")

  {

    return Doctrine::getTable('Category')->getParentCategories($this->getCategoryId(), false, $culture);

  }

  /**

   * Get product price

   */

  public function getPrice($code = null)
  {
    if (is_null($code)){

      $code = $this->getCurrencyMain();

    }
	$code = isset($_SESSION['currency'])? $_SESSION['currency'] : 'NOK';
	//$sf_user->getAttribute('currency');//$this->getAttribute('currency', 'NOK');//isset($_SESSION['currency'])? $_SESSION['currency'] : 'NOK';//$this->getAttribute('currency', 'NOK');
	//if ($code=='')
		//$code = 'NOK';
	$symbol = CurrencyTable::getInstance()->getSymbol($code);

    $value = $this->getPriceGlobal() * CurrencyTable::getInstance()->getValue($code);

    //return $xType = $this->getCategoryType();
	if($this->getCategoryType() == "realestates" || $this->getCategoryType() == "cars" || $this->getCategoryType() == "rental")
		return number_format($value, 0, '.', ','). ' '. $symbol;
	else
		return number_format($value, 2, '.', ','). ' '. $symbol;
	//return $value . ' '. $symbol;

  }



  public function getImages()

  {

    if ($this->isNew())

    {

      return array();

    }



    $images = array();

    $results = Doctrine::getTable('ProductImage')->getImagesByProductId($this->getId());

    foreach($results as $result)

    {

      $images[] = $result;

    }

    return $images;

  }



  public function getProductImages()

  {

    return Doctrine::getTable('ProductImage')->getImagesByProductId($this->getId());

  }



  public function getProductAttributes($is_main = -1, $culture = "")

  {

    return Doctrine::getTable('ProductAttribute')->getProductAttributes($this->getId(), $is_main, -1, -1, $culture);

  }



  public function getProductColumnAttribute($attribute_ids = array(), $culture = "")

  {

    return Doctrine::getTable('ProductAttribute')->getProductColumnAttribute($this->getId(), $attribute_ids, $culture);

  }



  /**

   * Setting default created time

   * @param Doctrine_Connection $conn

   * @return <type>

   */

  public function save(Doctrine_Connection $conn = null)

  {

    if ($this->isNew())

    {

      $this->setCreatedAt(date("Y-m-d H:i:s", time()));

    }else{



		// LNA - edid

		$now = strtotime("now");

		$day_diff = round(($now - strtotime($this->getConfirmedAt())) / 86400);

	

		if ($day_diff < $this->getDuration()){ // set to expired

			  $this->setStatus(1);

		}

	}

    $this->setUpdatedAt(date("Y-m-d H:i:s", time()));

    $object = parent::save($conn);



    /*

    //saving special attribute

    $specialAttribute = Doctrine::getTable('ProductAttribute')->findByProductAttribute($this->getId(), 98);

    if (!$specialAttribute)

    {

      $specialAttribute = new ProductAttribute();

      $specialAttribute->setAttributeId(98);

      $specialAttribute->setProductId($this->getId());

      $specialAttribute->save();

    }*/

    return $object;

  }



  /**

   * first deleting related records

   * @param Doctrine_Connection $conn

   * @return <type>

   */

  public function delete(Doctrine_Connection $conn = null)

  {

    //deleting images

    $productImages = Doctrine::getTable('ProductImage')->getImagesByProductId($this->getId());

    foreach($productImages as $productImage)

    {

      $productImage->delete();

    }



    //deleting product attributes

    $productAttributes = Doctrine::getTable('ProductAttribute')->getProductAttributeByProductId($this->getId());

    foreach($productAttributes as $productAttribute)

    {

      $productAttribute->delete();

    }



    //deleting product comments

    $productComments = Doctrine::getTable('ProductComment')->getProductComments($this->getId());

    foreach($productComments as $productComment)

    {

      $productComment->delete();

    }



    return parent::delete($conn);

  }

  /**

   * Return cache key

   */

  public function getCacheKey()

  {

    return $this->getId()."_".strtotime($this->getUpdatedAt());

  }



  public function getDopingPriceOptions()

  {

    $price = $this->getPriceMnt();

    return array("7" => "долоо хоног (".$price."  ₮)", "14" => "2 долоо хоног (".$price*1.8."  ₮)", "28" => "4 долоо хоног (".$price*3.2."  ₮)");

  }





  public function getReadCount()

  {

    $q = Doctrine_Query::create()

            ->from('ProductStat p')

            ->where('p.product_id = ?', $this->getId());

    $pStat = $q ->fetchOne();

    return ($pStat) ? $pStat->getReadCount() : 0;

  }



  public function getCategoryType()

  {

    if (!isset($this->_categoryType)){

      $rootCategory = Doctrine::getTable('Category')->getRootCategory($this->getCategoryId());

      $this->_categoryType = myConstants::getCategoryType($rootCategory->getId());

    }

    return $this->_categoryType;

  }

}