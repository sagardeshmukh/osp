<?php



/**

 * Category

 *

 * This class has been auto-generated by the Doctrine ORM Framework

 *

 * @package    yozoa

 * @subpackage model

 * @author     Falcon

 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $

 */

 class Category extends BaseCategory

{



  private $_isComparable = null;

  private $_categoryType;





  public function getCategoryType()

  {

    if (!isset($this->_categoryType)){

		//echo "[" . $this->getId() . "]";die;

      $rootCategory = $this->getTable()->getRootCategory($this->getId());

	  

      $this->_categoryType = myConstants::getCategoryType($rootCategory->getId());

    }

    return $this->_categoryType;

  }

  /**

   * Category is comparable

   */

  public function isComparable()

  {

	// LNA for jobs

	//if ($this->getCategoryType() == 'jobs') $this->_isComparable = false;

    if (!is_null($this->_isComparable))

    {

      return $this->_isComparable;

    }

    //is left

    if ($this->isLeaf())

    {

      $this->_isComparable = true;

    } else

    {

      $this->_isComparable = (bool) Doctrine::getTable('CategoryAttribute')->countFilterableAttribute($this->getId());

    }

    return $this->_isComparable;

  }



  public function getNbProducts()

  {

    if (method_exists($this, 'getNbProduct'))

    {

      return call_user_func(array($this, 'getNbProduct'));

    } else

    {

      return Doctrine::getTable('Category')->getNbProduct($this->getId());

    }

  }



  /**

   * Checking is leaf

   * @return <type>

   */

  public function isLeaf()

  {

    return $this->getRgt() - $this->getLft() == 1 ? true : false;

  }



  /**

   * return parent category

   * @return <type>

   */

  public function getParent()

  {

    return Doctrine::getTable('Category')->find($this->getParentId());

  }



  public function getParentCategories()

  {

    $category = $this->getParent();

    return Doctrine::getTable('Category')->getChildren($category ? $category->getParentId() : 0);

  }



  /**

   * Category save

   * @param Doctrine_Connection $conn

   * @return <type>

   */

  public function save(Doctrine_Connection $con = null, $fix_left_right = true)

  {

    $modified_fields = $this->getModified();



    $category_table = Doctrine::getTable('Category');

    //new object

    if ($this->isNew())

    {

      //saving and return category object

      $category = parent::save($con);



      if ($fix_left_right)

      {

        $category_table->fixLftRgt();

      }



      if (is_null($con))

      {

        $con = $this->getTable()->getConnection();

      }

      //inheriting all category attributes

      try

      {

        $con->execute("

      INSERT INTO  

        category_attribute (category_id, attribute_id)

      SELECT

                {$this->getId()}, ca.attribute_id

      FROM

        category AS node,

        category AS parent

      LEFT JOIN category_attribute ca ON ca.category_id = parent.id

      WHERE

            parent.lft < node.lft

        AND node.rgt < parent.rgt

        AND node.id = {$this->getId()}

                ");

      } catch (Exception $e)

      {



      }

    } elseif (isset($modified_fields['parent_id']))

    {

      $category = parent::save($con);

      if ($fix_left_right)

      {

        $category_table->fixLftRgt();

      }

    } else

    {

      $category = parent::save($con);

    }

    return $category;

  }



  /**

   * Delete category

   * @param Doctrine_Connection $conn

   * @return <type>

   */

  public function delete(Doctrine_Connection $conn = null)

  {

    $lft = $this->getLft();

    $rgt = $this->getRgt();

    $width = $rgt - $lft + 1;



    if (is_null($conn))

    {

      $conn = $this->getTable()->getConnection();

    }



    // $conn->execute("DELETE FROM category WHERE lft BETWEEN {$lft} AND {$rgt}");

    Doctrine_Query::create($conn)

        ->delete('Category c')

        ->where("c.lft BETWEEN ? AND ?", array($lft, $rgt))

        ->execute();



    // $conn->execute("UPDATE category SET rgt = rgt - {$width} WHERE rgt > {$rgt}");

    Doctrine_Query::create($conn)

        ->update('Category c')

        ->set('c.rgt', "c.rgt - {$width}")

        ->where('c.rgt > ?', $rgt)

        ->execute();





    //$conn->execute("UPDATE category SET lft = lft - {$width} WHERE lft > {$rgt}");

    Doctrine_Query::create($conn)

        ->update('Category c')

        ->set('c.lft', "c.lft - {$width}")

        ->where('c.lft > ?', $rgt)

        ->execute();



    return parent::delete($conn);

  }



}